pipeline {
    agent {
        docker { image 'maven:3.8.6-openjdk-8' }
    }
    stages {
        stage('Build app') {
            steps {
                dir('Bookstore') {
                    sh """
                    mvn clean install -DskipTests
                    """
                } 
            }        
        }
        stage('publish to nexus repo') {
            agent any
            enviroment {
                NEXUS_VERSION = "nexus3"
                NEXUS_PROTOCOL = "http"
                NEXUS_URL = "ec2-34-201-49-155.compute-1.amazonaws.com:8081"
                NEXUS_REPOSITORY = "bookstore-app"
                NEXUS_CREDENTIAL_ID = "nexus-admin-creds"
            }
            steps { 
                dir('Bookstore') {
                    scrips {
                        pom = readMavenPom file: "pom.xml";
                        articactPath = "target/${pom.artifactId}-${pom.version}.${pom.packaging}";
                        arifactExists = fileExists artifactPath;
                        if(articactExist) {
                            nexusArticactUploader(
                                nexusVersion : NEXUS_VERSION,
                                protocol : NEXUS_PROTOCOL,
                                nexusUrl : NEXUS_URL,
                                groupId : pom.groupId,
                                version : pom.version,
                                repository : NEXUS_REPOSITORY,
                                credentialsId : NEXUS_CREDENTIAL_ID,
                                artifacts : [
                                    [
                                        artifactId: pom.artifactId,
                                        classifier: "",
                                        file: artifactPath,
                                        type: pom.packaging
                                    ]
                                ]  
                            ): 
                        } else {
                            error "file ${artifactPath} could not be found"
                        }
                    }
                }
            }
        }
    }
    // post {
    //      // Clean after build
    //      always {
    //          cleanWs()
    //      }
    // }
}


