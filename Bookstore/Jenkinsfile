pipeline {
    agent any
    stages {
        // stage('Checkout repo') {
        //     steps {
        //         git branch: 'main',
        //         credentialsId: 'jenkins-git',
        //         url: 'https://github.com/hernanku/bookstore-web-app.git'
        //     }
        // }
        stage('Build app') {
            agent {
                docker { image 'maven:3.8.6-openjdk-8' }
            }
            steps {
                sh """
                cd Bookstore && \
                mvn clean install -DskipTests
                """
            }
        }
        stage("Publish to Nexus Repository Manager") {
            agent any
            environment {
                NEXUS_VERSION = "nexus3"
                NEXUS_PROTOCOL = "http"
                NEXUS_URL = "ec2-52-91-212-69.compute-1.amazonaws.com:8081"
                NEXUS_REPOSITORY = "bookstore-app"
                NEXUS_CREDENTIAL_ID = "nexus-admin-creds"
            }
            steps {
                dir('Bookstore') {
                    script {
                        pom = readMavenPom file: "pom.xml";
                        artifactPath = "target/${pom.artifactId}-${pom.version}.${pom.packaging}";
                        sh "echo ${artifactPath}"
                        artifactExists = fileExists artifactPath;
                        if(artifactExists) {
                            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: NEXUS_URL,
                                groupId: pom.groupId,
                                version: pom.version,
                                repository: NEXUS_REPOSITORY,
                                credentialsId: NEXUS_CREDENTIAL_ID,
                                artifacts: [
                                    [artifactId: pom.artifactId,
                                    classifier: '',
                                    file: artifactPath,
                                    type: pom.packaging]
                                ]
                            );
                        } else {
                            error "*** File: ${artifactPath}, could not be found";
                        }
                    }
                }
            }
        }
    }
    post {
        // Clean after build
        always {
            cleanWs()
        }
    }
}


